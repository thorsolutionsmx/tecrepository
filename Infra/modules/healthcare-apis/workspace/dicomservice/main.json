{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.19.5.34762",
      "templateHash": "2439060324976899647"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "maxLength": 50,
      "metadata": {
        "description": "Required. The name of the DICOM service."
      }
    },
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "Conditional. The name of the parent health data services workspace. Required if the template is used in a standalone deployment."
      }
    },
    "corsOrigins": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specify URLs of origin sites that can access this API, or use \"*\" to allow access from any site."
      }
    },
    "corsHeaders": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specify HTTP headers which can be used during the request. Use \"*\" for any header."
      }
    },
    "corsMethods": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specify the allowed HTTP methods."
      },
      "allowedValues": [
        "DELETE",
        "GET",
        "OPTIONS",
        "PATCH",
        "POST",
        "PUT"
      ]
    },
    "corsMaxAge": {
      "type": "int",
      "defaultValue": -1,
      "metadata": {
        "description": "Optional. Specify how long a result from a request can be cached in seconds. Example: 600 means 10 minutes."
      }
    },
    "corsAllowCredentials": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Use this setting to indicate that cookies should be included in CORS requests."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic storage account."
      }
    },
    "diagnosticWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "",
        "CanNotDelete",
        "ReadOnly"
      ]
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Optional. Control permission for data plane traffic coming from public networks while private endpoint is enabled."
      },
      "allowedValues": [
        "Disabled",
        "Enabled"
      ]
    },
    "systemAssignedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables system assigned managed identity on the resource."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The ID(s) to assign to the resource."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "enableDefaultTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
      }
    },
    "diagnosticLogCategoriesToEnable": {
      "type": "array",
      "defaultValue": [
        "AuditLogs"
      ],
      "allowedValues": [
        "AuditLogs"
      ],
      "metadata": {
        "description": "Optional. The name of logs that will be streamed."
      }
    },
    "diagnosticSettingsName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
        "input": {
          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
  },
  "resources": [
    {
      "condition": "[parameters('enableDefaultTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.HealthcareApis/workspaces/dicomservices",
      "apiVersion": "2022-06-01",
      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "properties": {
        "corsConfiguration": {
          "allowCredentials": "[parameters('corsAllowCredentials')]",
          "headers": "[parameters('corsHeaders')]",
          "maxAge": "[if(equals(parameters('corsMaxAge'), -1), null(), parameters('corsMaxAge'))]",
          "methods": "[parameters('corsMethods')]",
          "origins": "[parameters('corsOrigins')]"
        },
        "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
      }
    },
    {
      "condition": "[not(empty(parameters('lock')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/dicomservices/{1}', parameters('workspaceName'), parameters('name'))]",
      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/workspaces/dicomservices', parameters('workspaceName'), parameters('name'))]"
      ]
    },
    {
      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.HealthcareApis/workspaces/{0}/dicomservices/{1}', parameters('workspaceName'), parameters('name'))]",
      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
      "properties": {
        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
        "metrics": null,
        "logs": "[variables('diagnosticsLogs')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/workspaces/dicomservices', parameters('workspaceName'), parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the dicom service."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the dicom service."
      },
      "value": "[resourceId('Microsoft.HealthcareApis/workspaces/dicomservices', parameters('workspaceName'), parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group where the namespace is deployed."
      },
      "value": "[resourceGroup().name]"
    },
    "systemAssignedPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.HealthcareApis/workspaces/dicomservices', parameters('workspaceName'), parameters('name')), '2022-06-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.HealthcareApis/workspaces/dicomservices', parameters('workspaceName'), parameters('name')), '2022-06-01', 'full').identity.principalId, '')]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location the resource was deployed into."
      },
      "value": "[reference(resourceId('Microsoft.HealthcareApis/workspaces/dicomservices', parameters('workspaceName'), parameters('name')), '2022-06-01', 'full').location]"
    }
  }
}